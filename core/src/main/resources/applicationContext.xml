<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	default-lazy-init="true">

	<description>Spring公共配置</description>

	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.foomei.*.dao,com.foomei.*.service">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.foomei.*.entity" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="net.sf.ehcache.configurationResourceName">cache/ehcache-hibernate-local.xml</prop>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
			</props>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<bean factory-method="getDialect" class="com.foomei.common.persistence.Hibernates">
				<constructor-arg ref="dataSource" />
			</bean>
		</property>
	</bean>

	<!-- Spring Data Jpa配置, 扫描base-package下所有继承于Repository<T,ID>的接口 -->
	<jpa:repositories base-package="com.foomei.*.dao.jpa" transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.foomei.core.entity,com.foomei.core.vo" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
		<!-- 增删查改插件 -->
		<!-- <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" /> -->
		<property name="plugins">
	    <array>
	      <bean class="com.github.pagehelper.PageInterceptor">
	        <property name="properties">
	          <value>
	            dialect=com.github.pagehelper.dialect.helper.MySqlDialect
	            reasonable=true
	          </value>
	        </property>
	      </bean>
	      <bean class="com.github.abel533.mapperhelper.MapperInterceptor">
	      	<property name="properties">
	          <value>
	            mappers=com.github.abel533.mapper.Mapper,com.github.abel533.mapper.MySqlMapper
	            IDENTITY=MYSQL
	            UUID=@java.util.UUID@randomUUID().toString()
	          </value>
	        </property>
	      </bean>
	    </array>
	  </property>
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.foomei.*.dao.mybatis" />
		<property name="annotationClass" value="com.foomei.common.base.annotation.MybatisRepository" />
	</bean>

	<!-- 事务管理器配置, Jpa单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<bean id="fileRepository" class="com.foomei.common.web.FileRepository" />

	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- Spring容器初始化完成监听器 -->
  <bean class="com.foomei.common.web.ApplicationContextListener" />

	<!-- hibernate validator -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<bean id="propertyHolder" class="com.foomei.common.web.PropertyHolder">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>

	<!-- production环境 -->
	<beans profile="production">
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="maxActive" value="${jdbc.pool.maxActive}" />
			<property name="initialSize" value="${jdbc.pool.initialSize}" />
			<property name="maxWait" value="${jdbc.pool.maxWait}" />
			<property name="minIdle" value="${jdbc.pool.minIdle}" />
			<!-- 连接Idle10分钟后超时，每1分钟检查一次 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			<property name="minEvictableIdleTimeMillis" value="600000" />
			<!-- mysql中通常为select 'x'，在oracle中通常为select 1 from dual -->
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />

			<!-- mysql5.5以下不支持 poolPreparedStatements -->
			<!--<property name="poolPreparedStatements" value="true" /> -->
			<!--<property name="maxOpenPreparedStatements" value="20" /> -->

			<!-- 超过时间限制是否回收 -->
			<property name="removeAbandoned" value="true" />
			<!-- 超时时间；1800秒 -->
			<property name="removeAbandonedTimeout" value="1800" />
			<!-- 关闭abanded连接时输出错误日志 -->
			<property name="logAbandoned" value="true" />

			<!-- 开启Druid的监控统计功能 -->
			<property name="filters" value="wall,stat" />
		</bean>
	</beans>

	<!-- local development环境 -->
	<beans profile="development">
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />

			<!-- 开启Druid的监控统计功能 -->
			<property name="filters" value="stat" />
		</bean>
	</beans>

	<!-- unit test环境 -->
	<beans profile="test">
		<!-- Spring Simple连接池 -->
		<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
			<property name="driverClass" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</bean>

		<!-- 初始化数据结构与默认数据 -->
		<jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
			<jdbc:script location="classpath:sql/h2/schema.sql" />
			<jdbc:script location="classpath:data/h2/import-data.sql" encoding="UTF-8" />
		</jdbc:initialize-database>
	</beans>
</beans>