package ${package}.web.api;

import com.baidu.unbiz.fluentvalidator.ComplexResult;
import com.baidu.unbiz.fluentvalidator.FluentValidator;
import com.baidu.unbiz.fluentvalidator.ResultCollectors;
import com.baidu.unbiz.fluentvalidator.jsr303.HibernateSupportedValidator;
import com.foomei.common.dto.PageQuery;
import com.foomei.common.dto.ResponseResult;
import com.foomei.common.mapper.BeanMapper;
import com.foomei.common.persistence.search.SearchRequest;
import ${package}.dto.${model}Dto;
import ${package}.entity.${model};
import ${package}.service.${model}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Validation;

@Api(description = "${comment}接口")
@RestController
@RequestMapping(value = "/api/${variable}")
public class ${model}Endpoint {

  @Autowired
  private ${model}Service ${variable}Service;

  @ApiOperation(value = "${comment}分页列表", httpMethod = "GET", produces = "application/json")
  @RequestMapping(value = "page", method = RequestMethod.GET)
  public ResponseResult<Page<${model}Dto>> page(PageQuery pageQuery, HttpServletRequest request) {
    Page<${model}> page = ${variable}Service.getPage(new SearchRequest(pageQuery));
    return ResponseResult.createSuccess(page, ${model}.class, ${model}Dto.class);
  }

  @ApiOperation(value = "${comment}新增", httpMethod = "POST", produces = "application/json")
  @RequestMapping(value = "create", method = RequestMethod.POST)
  public ResponseResult<${model}Dto> create(${model}Dto dto) {
    ${model} ${variable} = BeanMapper.map(dto, ${model}.class);

    ComplexResult result = validate(${variable});
    if (!result.isSuccess()) {
      return ResponseResult.createParamError(result);
    } else {
      ${variable}Service.save(${variable});
    }

    return ResponseResult.createSuccess(${variable}, ${model}Dto.class);
  }

  @ApiOperation(value = "${comment}修改", httpMethod = "POST", produces = "application/json")
  @RequestMapping(value = "update", method = RequestMethod.POST)
  public ResponseResult<${model}Dto> update(${model}Dto dto) {
    ${model} ${variable} = ${variable}Service.get(dto.getId());
    ${variable} = BeanMapper.map(dto, ${variable}, ${model}Dto.class, ${model}.class);

    ComplexResult result = validate(${variable});
    if (!result.isSuccess()) {
      return ResponseResult.createParamError(result);
    } else {
      ${variable}Service.save(${variable});
    }

    return ResponseResult.createSuccess(${variable}, ${model}Dto.class);
  }

  @ApiOperation(value = "${comment}删除", httpMethod = "GET")
  @RequestMapping(value = "delete/{id}")
  public ResponseResult delete(@PathVariable("id") ${idType} id) {
    ${variable}Service.delete(id);
    return ResponseResult.SUCCEED;
  }

  private ComplexResult validate(${model} ${variable}) {
  ComplexResult result = FluentValidator.checkAll()
    .on(${variable}, new HibernateSupportedValidator<${model}>().setHiberanteValidator(Validation.buildDefaultValidatorFactory().getValidator()))
    .doValidate()
    .result(ResultCollectors.toComplex());
    return result;
  }

}
